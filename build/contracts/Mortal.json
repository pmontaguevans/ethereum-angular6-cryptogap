{
  "contractName": "Mortal",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101a5806100536000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b5146100515780638da5cb5b14610068575b600080fd5b34801561005d57600080fd5b506100666100bf565b005b34801561007457600080fd5b5061007d610154565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561011a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582061e2d97f3d859efac33332bc21b47fc6e7b0fca53ba42499ae0684588ad373db0029",
  "deployedBytecode": "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b5146100515780638da5cb5b14610068575b600080fd5b34801561005d57600080fd5b506100666100bf565b005b34801561007457600080fd5b5061007d610154565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561011a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582061e2d97f3d859efac33332bc21b47fc6e7b0fca53ba42499ae0684588ad373db0029",
  "sourceMap": "49:494:5:-;;;183:10:6;175:5;;:18;;;;;;;;;;;;;;;;;;49:494:5;;;;;;",
  "deployedSourceMap": "49:494:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;451:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;451:90:5;;;;;;47:20:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;47:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;451:90:5;499:5;;;;;;;;;;;485:19;;:10;:19;;;477:28;;;;;;;;528:5;;;;;;;;;;;515:19;;;47:20:6;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.4.24;\n\nimport \"./Owned.sol\";\n\ncontract Mortal is Owned {\n\n/**\n* @notice function kill() is used to destroy the contract whenever you want.\n* We only want the owner to be able to kill it.\n* The remaining ether that the contract has stored will be sent to the ownerâ€™s address.\n* Only use it if the contract is compromised and if so this function gives\n* the ability to destroy the contract and remove it from the blockchain.\n*/\n    function kill() {\n        require(msg.sender == owner);\n        selfdestruct(owner);\n    }\n}",
  "sourcePath": "/Users/dalailama/Desktop/development/cryptogap/contracts/Mortal.sol",
  "ast": {
    "absolutePath": "/Users/dalailama/Desktop/development/cryptogap/contracts/Mortal.sol",
    "exportedSymbols": {
      "Mortal": [
        813
      ]
    },
    "id": 814,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 794,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:5"
      },
      {
        "absolutePath": "/Users/dalailama/Desktop/development/cryptogap/contracts/Owned.sol",
        "file": "./Owned.sol",
        "id": 795,
        "nodeType": "ImportDirective",
        "scope": 814,
        "sourceUnit": 840,
        "src": "26:21:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 796,
              "name": "Owned",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 839,
              "src": "68:5:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Owned_$839",
                "typeString": "contract Owned"
              }
            },
            "id": 797,
            "nodeType": "InheritanceSpecifier",
            "src": "68:5:5"
          }
        ],
        "contractDependencies": [
          839
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 813,
        "linearizedBaseContracts": [
          813,
          839
        ],
        "name": "Mortal",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 811,
              "nodeType": "Block",
              "src": "467:74:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 801,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 982,
                            "src": "485:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 802,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "485:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 803,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 817,
                          "src": "499:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "485:19:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 800,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        985,
                        986
                      ],
                      "referencedDeclaration": 985,
                      "src": "477:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 805,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "477:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 806,
                  "nodeType": "ExpressionStatement",
                  "src": "477:28:5"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 808,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 817,
                        "src": "528:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 807,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 990,
                      "src": "515:12:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 809,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "515:19:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 810,
                  "nodeType": "ExpressionStatement",
                  "src": "515:19:5"
                }
              ]
            },
            "documentation": "@notice function kill() is used to destroy the contract whenever you want.\nWe only want the owner to be able to kill it.\nThe remaining ether that the contract has stored will be sent to the ownerâ€™s address.\nOnly use it if the contract is compromised and if so this function gives\nthe ability to destroy the contract and remove it from the blockchain.",
            "id": 812,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "464:2:5"
            },
            "payable": false,
            "returnParameters": {
              "id": 799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "467:0:5"
            },
            "scope": 813,
            "src": "451:90:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 814,
        "src": "49:494:5"
      }
    ],
    "src": "0:543:5"
  },
  "legacyAST": {
    "absolutePath": "/Users/dalailama/Desktop/development/cryptogap/contracts/Mortal.sol",
    "exportedSymbols": {
      "Mortal": [
        813
      ]
    },
    "id": 814,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 794,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:5"
      },
      {
        "absolutePath": "/Users/dalailama/Desktop/development/cryptogap/contracts/Owned.sol",
        "file": "./Owned.sol",
        "id": 795,
        "nodeType": "ImportDirective",
        "scope": 814,
        "sourceUnit": 840,
        "src": "26:21:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 796,
              "name": "Owned",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 839,
              "src": "68:5:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Owned_$839",
                "typeString": "contract Owned"
              }
            },
            "id": 797,
            "nodeType": "InheritanceSpecifier",
            "src": "68:5:5"
          }
        ],
        "contractDependencies": [
          839
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 813,
        "linearizedBaseContracts": [
          813,
          839
        ],
        "name": "Mortal",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 811,
              "nodeType": "Block",
              "src": "467:74:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 801,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 982,
                            "src": "485:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 802,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "485:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 803,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 817,
                          "src": "499:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "485:19:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 800,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        985,
                        986
                      ],
                      "referencedDeclaration": 985,
                      "src": "477:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 805,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "477:28:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 806,
                  "nodeType": "ExpressionStatement",
                  "src": "477:28:5"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 808,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 817,
                        "src": "528:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 807,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 990,
                      "src": "515:12:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 809,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "515:19:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 810,
                  "nodeType": "ExpressionStatement",
                  "src": "515:19:5"
                }
              ]
            },
            "documentation": "@notice function kill() is used to destroy the contract whenever you want.\nWe only want the owner to be able to kill it.\nThe remaining ether that the contract has stored will be sent to the ownerâ€™s address.\nOnly use it if the contract is compromised and if so this function gives\nthe ability to destroy the contract and remove it from the blockchain.",
            "id": 812,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 798,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "464:2:5"
            },
            "payable": false,
            "returnParameters": {
              "id": 799,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "467:0:5"
            },
            "scope": 813,
            "src": "451:90:5",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 814,
        "src": "49:494:5"
      }
    ],
    "src": "0:543:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "1535379465382": {
      "events": {},
      "links": {},
      "address": "0x113dbaafcebdfcdc9c78772454803d434efd1140",
      "transactionHash": "0x376ccd514fa882c1f28c2336ca2b098f1ceb78b148aa62d14e94008c49c4dd52"
    },
    "1535407139642": {
      "events": {},
      "links": {},
      "address": "0x526006dc75acf41795b5747bbfa65ce757a3cade",
      "transactionHash": "0x1bd75c82e328be43bdda2edd8c579b43330e8283f93dc51ce47c8e87ab1e8e0d"
    },
    "1535444960166": {
      "events": {},
      "links": {},
      "address": "0x28326b51f170952b1cfbd4a027badaa4b9fb53cb",
      "transactionHash": "0x9e12486cfeceb22e7d3f5008a543c8cc382672b0b6b6fe25c1393b3d605bbd85"
    },
    "1535457159379": {
      "events": {},
      "links": {},
      "address": "0xf87710881025dc70ec7072d19f4f828e516561b9",
      "transactionHash": "0x9fae633ab3d12cb608071d0f36d205681dd327e5d176a32972c215c06daa17f6"
    }
  },
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-08-28T11:53:07.705Z"
}